<?xml version="1.0"?>
<doc>
    <assembly>
        <name>jjm.one.RabbitMqClientWrapper</name>
    </assembly>
    <members>
        <member name="T:jjm.one.RabbitMqClientWrapper.di.core.RmqcCoreDi">
            <summary>
            This class contains function for dependency injection of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.di.core.RmqcCoreDi.AddRmqcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,jjm.one.RabbitMqClientWrapper.types.Settings)">
            <summary>
            Adds all dependencies ot the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>.
            </summary>
            <param name="services"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.di.RmqcWrapperDi">
            <summary>
            This class contains function for dependency injection of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.di.RmqcWrapperDi.AddRmqcWrapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,jjm.one.RabbitMqClientWrapper.types.Settings)">
            <summary>
            Adds all dependencies ot the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>.
            </summary>
            <param name="services"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore">
            <summary>
            This interface defines the core functionality to connect and communicate with a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Settings">
            <summary>
            This object contains the settings for the RabbitMQ client.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Connected">
            <summary>
            This flag indicates whether the client is connected the the RabbitMQ server or not.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Init">
            <summary>
            Init the connection to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.DeInit">
            <summary>
            De-init the connection to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Connect(System.Exception@)">
            <summary>
            Connect to the RabbitMQ server.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Disconnect">
            <summary>
            Disconnect form the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.WriteMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Exception@)">
            <summary>
            Write a <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> to the RabbitMQ server
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.ReadMsg(jjm.one.RabbitMqClientWrapper.types.Message@,System.Boolean,System.Exception@)">
            <summary>
            Read a <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> to the RabbitMQ server.
            </summary>
            <param name="message"></param>
            <param name="autoAck"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.AckMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Exception@)">
            <summary>
            Ack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/>.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.NackMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Boolean,System.Exception@)">
            <summary>
            Nack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/>.
            </summary>
            <param name="message"></param>
            <param name="requeue"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.WaitForWriteConfirm(System.TimeSpan,System.Exception@)">
            <summary>
            Wait until the server confirms the written <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/>.
            </summary>
            <param name="timeout"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.QueuedMsgs(System.Nullable{System.UInt32}@,System.Exception@)">
            <summary>
            Get the amount of <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> stored in the RabbitMQ server queue which are ready get read.
            </summary>
            <param name="amount"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore">
            <summary>
            This class implements the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore"/> interface for a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Settings">
            <summary>
            This object contains the settings for the RabbitMQ client.
            Note:
            Changing the <see cref="P:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Settings"/> object of a connected client will result in the disconnection from the server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Connected">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.#ctor(jjm.one.RabbitMqClientWrapper.types.Settings,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.core.RmqcCore})">
            <summary>
            A parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class.
            </summary>
            <param name="settings"></param>
            <param name="logger"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.#ctor(jjm.one.RabbitMqClientWrapper.types.Settings,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.core.RmqcCore},RabbitMQ.Client.IConnectionFactory,RabbitMQ.Client.IConnection,RabbitMQ.Client.IModel)">
            <summary>
            A parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class.
            For unit-tests only!
            </summary>
            <param name="settings"></param>
            <param name="logger"></param>
            <param name="connectionFactory"></param>
            <param name="connection"></param>
            <param name="channel"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Init">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.DeInit">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Connect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.WriteMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ReadMsg(jjm.one.RabbitMqClientWrapper.types.Message@,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.AckMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.NackMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.WaitForWriteConfirm(System.TimeSpan,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.QueuedMsgs(System.Nullable{System.UInt32}@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper">
            <summary>
            This interface defines the core and additional functionality to connect and communicate with a RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.Connect">
            <summary>
            Connect to the RabbitMQ server.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.Disconnect">
            <summary>
            Disconnect from the RabbitMQ server.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.Disconnect(System.Exception@)">
            <summary>
            Disconnect from the RabbitMQ server.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReConnect">
            <summary>
            Disconnect and connects form the RabbitMQ server.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReConnect(System.Exception@)">
            <summary>
            Disconnect and connects form the RabbitMQ server.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.WriteMsg(jjm.one.RabbitMqClientWrapper.types.Message)">
            <summary>
            Write a <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> to the RabbitMQ server
            </summary>
            <param name="message"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReadMsg(jjm.one.RabbitMqClientWrapper.types.Message@,System.Boolean)">
            <summary>
            Read a <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> to the RabbitMQ server.
            </summary>
            <param name="message"></param>
            <param name="autoAck"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.AckMsg(jjm.one.RabbitMqClientWrapper.types.Message)">
            <summary>
            Ack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/>.
            </summary>
            <param name="message"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.NackMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Boolean)">
            <summary>
            Nack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/>.
            </summary>
            <param name="message"></param>
            <param name="requeue"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.WaitForWriteConfirm(System.TimeSpan)">
            <summary>
            Wait until the server confirms the written <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/>.
            </summary>
            <param name="timeout"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.QueuedMsgs(System.Nullable{System.UInt32}@)">
            <summary>
            Get the amount of <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> queued in the RabbitMQ server queue which are ready get read.
            </summary>
            <param name="amount"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ConnectCompleted">
            <summary>
            This events gets invoked when the connect function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.DisconnectCompleted">
            <summary>
            This events gets invoked when the disconnect function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReConnectCompleted">
            <summary>
            This events gets invoked when the re-connect function finishes.
            </summary>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper">
            <summary>
            This class implements the <see cref="T:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper"/> interface for a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Settings">
            <summary>
            This object contains the settings for the RabbitMQ client.
            Note:
            Changing the <see cref="P:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Settings"/> object of a connected client will result in the disconnection from the server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Connected">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.#ctor(jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.RmqcWrapper})">
            <summary>
            A parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class.
            </summary>
            <param name="core"></param>
            <param name="logger"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.#ctor(jjm.one.RabbitMqClientWrapper.types.Settings,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.RmqcWrapper})">
            <summary>
            A parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class.
            </summary>
            <param name="settings"></param>
            <param name="logger"></param>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ConnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.DisconnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnectCompleted">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Init">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.DeInit">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Connect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Connect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.jjm#one#RabbitMqClientWrapper#main#core#IRmqcCore#Disconnect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Disconnect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WriteMsg(jjm.one.RabbitMqClientWrapper.types.Message)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WriteMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReadMsg(jjm.one.RabbitMqClientWrapper.types.Message@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReadMsg(jjm.one.RabbitMqClientWrapper.types.Message@,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.AckMsg(jjm.one.RabbitMqClientWrapper.types.Message)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.AckMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.NackMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.NackMsg(jjm.one.RabbitMqClientWrapper.types.Message,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WaitForWriteConfirm(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WaitForWriteConfirm(System.TimeSpan,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.QueuedMsgs(System.Nullable{System.UInt32}@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.QueuedMsgs(System.Nullable{System.UInt32}@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnConnectCompleted(jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ConnectCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnDisconnectCompleted(jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.DisconnectCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnReConnectCompleted(jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnectCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs">
            <summary>
            This class represents the event args for a ack completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether sending the ack to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during sending the ack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to send the ack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs.DeliveryTag">
            <summary>
            The delivery tag of the ack msg.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{System.UInt64})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.AckCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="deliveryTag"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs">
            <summary>
            This class represents the event args for a connection completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether connecting to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during connecting to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to connect to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs">
            <summary>
            This class represents the event args for a disconnection completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether disconnecting from the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during disconnecting from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to disconnect from the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs">
            <summary>
            This class represents the event args for a nack completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether sending the nack to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during sending the nack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to send the nack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs.DeliveryTag">
            <summary>
            The delivery tag of the nack msg.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{System.UInt64})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.NackCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="deliveryTag"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs">
            <summary>
            This class represents the event args for a queued msg's completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether getting the amount of queued msg's from the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during getting the amount of queued msg's from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to get the amount of queued msg's from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.Amount">
            <summary>
            The amount of queued msg's in the queue.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{System.UInt32})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="amount"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs">
            <summary>
            This class represents the event args for a read completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether reading a messages from the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during reading a messages from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to read a message from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs.Message">
            <summary>
            The read message.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},jjm.one.RabbitMqClientWrapper.types.Message)">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ReadCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="message"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs">
            <summary>
            This class represents the event args for a re-connection completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether re-connecting to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during re-connecting to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to re-connect to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.WriteCompletedEventArgs">
            <summary>
            This class represents the event args for a write completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.WriteCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether writing a message to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.WriteCompletedEventArgs.Exception">
            <summary>
            The exception which may have occured during writing a message to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.WriteCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to write a message to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.WriteCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.WriteCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException">
            <summary>
            This class represents an exception which gets thrown if the <see cref="T:RabbitMQ.Client.IModel"/> in a <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> object is null or not initialized.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException">
            <summary>
            This class represents an exception which gets thrown if the <see cref="T:RabbitMQ.Client.IConnection"/> in a <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> object is null or not initialized.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException">
            <summary>
            This class represents an exception which gets thrown if the <see cref="T:RabbitMQ.Client.IConnectionFactory"/> in a <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> object is null or not initialized.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException">
            <summary>
            This class represents an exception which gets thrown if the client is not initialized properly before performing an action.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.Operation">
            <summary>
            The name of the operation which causes the exception.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.#ctor(System.String)">
            <summary>
            A parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.Message">
            <summary>
            This class represents a message which gets send an received to or from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Message.RawBasicGetResult">
            <summary>
            The raw <see cref="T:RabbitMQ.Client.BasicGetResult"/> contained in this <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> object.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Message.DeliveryTag">
            <summary>
            The delivery tag of this message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Message.RoutingKey">
            <summary>
            The routing key of this message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Message.BasicProperties">
            <summary>
            The basic properties of the message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Message.Body">
            <summary>
            The body containing the payload of the message. 
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.Message.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.Message.#ctor(RabbitMQ.Client.BasicGetResult)">
            <summary>
            The additional parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.Message"/> class.
            </summary>
            <param name="rawMessage"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.Settings">
            <summary>
            This class defines the settings for a client connection to a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.Hostname">
             <summary>
             The hostname of the RabbitMQ server.
            
             default value: localhost
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.Port">
             <summary>
             The port of the RabbitMQ server.
            
             default value: 5672
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.Username">
             <summary>
             The username of a RabbitMQ server user.
            
             default value: guest
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.Password">
             <summary>
             The password of a RabbitMQ server user.
            
             default value: guest
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.VHost">
             <summary>
             The vhost at the RabbitMQ server.
            
             default value: /
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.Exchange">
             <summary>
             The exchange at the RabbitMQ server.
            
             default value: amq.direct
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.Settings.Queue">
            <summary>
            The queue at the RabbitMQ server.
            
            default value: ""
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.Settings.#ctor(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The parameterised constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.Settings"/> class.
            </summary>
            <param name="hostname">The hostname of the RabbitMQ server.</param>
            <param name="port">The port of the RabbitMQ server.</param>
            <param name="username">The username of a RabbitMQ server user.</param>
            <param name="password">The password of a RabbitMQ server user.</param>
            <param name="vHost">The vhost at the RabbitMQ server.</param>
            <param name="exchange">The exchange at the RabbitMQ server.</param>
            <param name="queue">The queue at the RabbitMQ server.</param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.Settings.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:jjm.one.RabbitMqClientWrapper.types.Settings"/> object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns><see langword="true"/> if the specified object is equal to the current object, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.Settings.GetHashCode">
            <summary>
            Serves as the default hash function for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.Settings"/> class.
            </summary>
            <returns>A hash code for the current <see cref="T:jjm.one.RabbitMqClientWrapper.types.Settings"/> object.</returns>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.util.TimeSpanTools">
            <summary>
            This class contains some functions to convert from/to a <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.util.TimeSpanTools.MillisecondsToTimeSpan(System.Int32)">
            <summary>
            Converts an <see cref="T:System.Int32"/> object to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
    </members>
</doc>
